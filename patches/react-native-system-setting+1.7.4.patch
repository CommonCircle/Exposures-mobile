diff --git a/node_modules/react-native-system-setting/android/src/main/java/com/ninty/system/setting/SystemSetting.java b/node_modules/react-native-system-setting/android/src/main/java/com/ninty/system/setting/SystemSetting.java
index dedd524..eb92de0 100644
--- a/node_modules/react-native-system-setting/android/src/main/java/com/ninty/system/setting/SystemSetting.java
+++ b/node_modules/react-native-system-setting/android/src/main/java/com/ninty/system/setting/SystemSetting.java
@@ -35,73 +35,25 @@ public class SystemSetting extends ReactContextBaseJavaModule implements Activit

     private String TAG = SystemSetting.class.getSimpleName();

-    private static final String VOL_VOICE_CALL = "call";
-    private static final String VOL_SYSTEM = "system";
-    private static final String VOL_RING = "ring";
-    private static final String VOL_MUSIC = "music";
-    private static final String VOL_ALARM = "alarm";
-    private static final String VOL_NOTIFICATION = "notification";
-
     private ReactApplicationContext mContext;
-    private AudioManager am;
-    private WifiManager wm;
-    private LocationManager lm;
-    private VolumeBroadcastReceiver volumeBR;
-    private volatile BroadcastReceiver wifiBR;
     private volatile BroadcastReceiver bluetoothBR;
-    private volatile BroadcastReceiver locationBR;
-    private volatile BroadcastReceiver locationModeBR;
-    private volatile BroadcastReceiver airplaneBR;

     public SystemSetting(ReactApplicationContext reactContext) {
         super(reactContext);
         mContext = reactContext;
         reactContext.addLifecycleEventListener(this);
-        am = (AudioManager) mContext.getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
-        wm = (WifiManager) mContext.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
-        lm = (LocationManager) mContext.getApplicationContext().getSystemService(Context.LOCATION_SERVICE);
-
-        volumeBR = new VolumeBroadcastReceiver();
     }

     private void registerVolumeReceiver() {
-        if (!volumeBR.isRegistered()) {
-            IntentFilter filter = new IntentFilter("android.media.VOLUME_CHANGED_ACTION");
-            mContext.registerReceiver(volumeBR, filter);
-            volumeBR.setRegistered(true);
-        }
+        // to remove
     }

     private void unregisterVolumeReceiver() {
-        if (volumeBR.isRegistered()) {
-            mContext.unregisterReceiver(volumeBR);
-            volumeBR.setRegistered(false);
-        }
+        // to remove
     }

     private void listenWifiState() {
-        if (wifiBR == null) {
-            synchronized (this) {
-                if (wifiBR == null) {
-                    wifiBR = new BroadcastReceiver() {
-                        @Override
-                        public void onReceive(Context context, Intent intent) {
-                            if (intent.getAction().equals(WifiManager.WIFI_STATE_CHANGED_ACTION)) {
-                                int wifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, 0);
-                                if (wifiState == WifiManager.WIFI_STATE_ENABLED || wifiState == WifiManager.WIFI_STATE_DISABLED) {
-                                    mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-                                            .emit("EventWifiChange", wifiState == WifiManager.WIFI_STATE_ENABLED);
-                                }
-                            }
-                        }
-                    };
-                    IntentFilter wifiFilter = new IntentFilter();
-                    wifiFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);
-
-                    mContext.registerReceiver(wifiBR, wifiFilter);
-                }
-            }
-        }
+        // to remove
     }

     private void listenBluetoothState() {
@@ -130,72 +82,15 @@ public class SystemSetting extends ReactContextBaseJavaModule implements Activit
     }

     private void listenLocationState() {
-        if (locationBR == null) {
-            synchronized (this) {
-                if (locationBR == null) {
-                    locationBR = new BroadcastReceiver() {
-                        @Override
-                        public void onReceive(Context context, Intent intent) {
-                            if (intent.getAction().equals(LocationManager.PROVIDERS_CHANGED_ACTION)) {
-                                mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-                                        .emit("EventLocationChange", isLocationEnable());
-                            }
-                        }
-                    };
-                    IntentFilter locationFilter = new IntentFilter();
-                    locationFilter.addAction(LocationManager.PROVIDERS_CHANGED_ACTION);
-
-                    mContext.registerReceiver(locationBR, locationFilter);
-                }
-            }
-        }
+        // to remove
     }

     private void listenLocationModeState() {
-        if (locationModeBR == null) {
-            synchronized (this) {
-                if (locationModeBR == null) {
-                    locationModeBR = new BroadcastReceiver() {
-                        @Override
-                        public void onReceive(Context context, Intent intent) {
-                            if (intent.getAction().equals(LocationManager.MODE_CHANGED_ACTION)) {
-                                mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-                                        .emit("EventLocationModeChange", getLocationMode());
-                            }
-                        }
-                    };
-                    IntentFilter locationFilter = new IntentFilter();
-                    locationFilter.addAction(LocationManager.MODE_CHANGED_ACTION);
-
-                    mContext.registerReceiver(locationModeBR, locationFilter);
-                }
-            }
-        }
+        // to remove
     }

     private void listenAirplaneState() {
-        if (airplaneBR == null) {
-            synchronized (this) {
-                if (airplaneBR == null) {
-                    airplaneBR = new BroadcastReceiver() {
-                        @Override
-                        public void onReceive(Context context, Intent intent) {
-                            try {
-                                int val = Settings.System.getInt(mContext.getContentResolver(), Settings.System.AIRPLANE_MODE_ON);
-                                mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-                                        .emit("EventAirplaneChange", val == 1);
-                            } catch (Settings.SettingNotFoundException e) {
-                                Log.e(TAG, "err", e);
-                            }
-                        }
-                    };
-                    IntentFilter locationFilter = new IntentFilter();
-                    locationFilter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
-
-                    mContext.registerReceiver(airplaneBR, locationFilter);
-                }
-            }
-        }
+        // to remove
     }

     @Override
@@ -205,61 +100,27 @@ public class SystemSetting extends ReactContextBaseJavaModule implements Activit

     @ReactMethod
     public void setScreenMode(int mode, Promise promise) {
-        mode = mode == Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL ? mode : Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC;
-        checkAndSet(Settings.System.SCREEN_BRIGHTNESS_MODE, mode, promise);
+        // to remove
     }

     @ReactMethod
     public void getScreenMode(Promise promise) {
-        try {
-            int mode = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS_MODE);
-            promise.resolve(mode);
-        } catch (Settings.SettingNotFoundException e) {
-            Log.e(TAG, "err", e);
-            promise.reject("-1", "get screen mode fail", e);
-        }
+        // to remove
     }

     @ReactMethod
     public void setBrightness(float val, Promise promise) {
-        final int brightness = (int) (val * 255);
-        checkAndSet(Settings.System.SCREEN_BRIGHTNESS, brightness, promise);
+        // to remove
     }

     @ReactMethod
     public void setAppBrightness(float val) {
-        final Activity curActivity = getCurrentActivity();
-        if (curActivity == null) {
-            return;
-        }
-        final WindowManager.LayoutParams lp = curActivity.getWindow().getAttributes();
-        lp.screenBrightness = val;
-        curActivity.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                curActivity.getWindow().setAttributes(lp);
-            }
-        });
+        // to remove
     }

     @ReactMethod
     public void getAppBrightness(Promise promise) {
-        final Activity curActivity = getCurrentActivity();
-        if (curActivity == null) {
-            return;
-        }
-        try {
-            float result = curActivity.getWindow().getAttributes().screenBrightness;
-            if (result < 0) {
-                int val = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS);
-                promise.resolve(val * 1.0f / 255);
-            } else {
-                promise.resolve(result);
-            }
-        } catch (Exception e) {
-            Log.e(TAG, "err", e);
-            promise.reject("-1", "get app's brightness fail", e);
-        }
+        // to remove
     }

     @ReactMethod
@@ -270,50 +131,17 @@ public class SystemSetting extends ReactContextBaseJavaModule implements Activit

     @ReactMethod
     public void getBrightness(Promise promise) {
-        try {
-            int val = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREEN_BRIGHTNESS);
-            promise.resolve(val * 1.0f / 255);
-        } catch (Settings.SettingNotFoundException e) {
-            Log.e(TAG, "err", e);
-            promise.reject("-1", "get brightness fail", e);
-        }
+        // to remove
     }

     @ReactMethod
     public void setVolume(float val, ReadableMap config) {
-        unregisterVolumeReceiver();
-        String type = config.getString("type");
-        boolean playSound = config.getBoolean("playSound");
-        boolean showUI = config.getBoolean("showUI");
-        int volType = getVolType(type);
-        int flags = 0;
-        if (playSound) {
-            flags |= AudioManager.FLAG_PLAY_SOUND;
-        }
-        if (showUI) {
-            flags |= AudioManager.FLAG_SHOW_UI;
-        }
-        try {
-            am.setStreamVolume(volType, (int) (val * am.getStreamMaxVolume(volType)), flags);
-        } catch (SecurityException e) {
-            if (val == 0) {
-                Log.w(TAG, "setVolume(0) failed. See https://github.com/c19354837/react-native-system-setting/issues/48");
-                NotificationManager notificationManager =
-                        (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
-                        && !notificationManager.isNotificationPolicyAccessGranted()) {
-                    Intent intent = new Intent(android.provider.Settings.ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS);
-                    mContext.startActivity(intent);
-                }
-            }
-            Log.e(TAG, "err", e);
-        }
-        registerVolumeReceiver();
+        // to remove
     }

     @ReactMethod
     public void getVolume(String type, Promise promise) {
-        promise.resolve(getNormalizationVolume(type));
+        // to remove
     }

     private void checkAndSet(String name, int value, Promise promise) {
@@ -342,89 +170,34 @@ public class SystemSetting extends ReactContextBaseJavaModule implements Activit
         }
     }

-    private float getNormalizationVolume(String type) {
-        int volType = getVolType(type);
-        return am.getStreamVolume(volType) * 1.0f / am.getStreamMaxVolume(volType);
-    }
-
-    private int getVolType(String type) {
-        switch (type) {
-            case VOL_VOICE_CALL:
-                return AudioManager.STREAM_VOICE_CALL;
-            case VOL_SYSTEM:
-                return AudioManager.STREAM_SYSTEM;
-            case VOL_RING:
-                return AudioManager.STREAM_RING;
-            case VOL_ALARM:
-                return AudioManager.STREAM_ALARM;
-            case VOL_NOTIFICATION:
-                return AudioManager.STREAM_NOTIFICATION;
-            default:
-                return AudioManager.STREAM_MUSIC;
-        }
-    }
-
     @ReactMethod
     public void isWifiEnabled(Promise promise) {
-        if (wm != null) {
-            promise.resolve(wm.isWifiEnabled());
-        } else {
-            promise.reject("-1", "get wifi manager fail");
-        }
+        // to remove
     }

     @ReactMethod
     public void switchWifiSilence() {
-        if (wm != null) {
-            listenWifiState();
-            wm.setWifiEnabled(!wm.isWifiEnabled());
-        } else {
-            Log.w(TAG, "Cannot get wifi manager, switchWifi will be ignored");
-        }
+        // to remove
     }

     @ReactMethod
     public void switchWifi() {
-        switchSetting(SysSettings.WIFI);
+        // to remove
     }

     @ReactMethod
     public void isLocationEnabled(Promise promise) {
-        if (lm != null) {
-            promise.resolve(isLocationEnable());
-        } else {
-            promise.reject("-1", "get location manager fail");
-        }
+        // to remove
     }

     @ReactMethod
     public void getLocationMode(Promise promise) {
-        if (lm != null) {
-            promise.resolve(getLocationMode());
-        } else {
-            promise.reject("-1", "get location manager fail");
-        }
-    }
-
-    private int getLocationMode() {
-        int result = 0;
-        if (lm.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
-            result |= 1;
-        }
-        if (lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
-            result |= 1 << 1;
-        }
-        return result;
-    }
-
-    private boolean isLocationEnable() {
-        return lm.isProviderEnabled(LocationManager.GPS_PROVIDER)
-                || lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
+        // to remove
     }

     @ReactMethod
     public void switchLocation() {
-        switchSetting(SysSettings.LOCATION);
+        // to remove
     }

     @ReactMethod
@@ -542,59 +315,9 @@ public class SystemSetting extends ReactContextBaseJavaModule implements Activit

     @Override
     public void onHostDestroy() {
-        if (wifiBR != null) {
-            mContext.unregisterReceiver(wifiBR);
-            wifiBR = null;
-        }
         if (bluetoothBR != null) {
             mContext.unregisterReceiver(bluetoothBR);
             bluetoothBR = null;
         }
-        if (locationBR != null) {
-            mContext.unregisterReceiver(locationBR);
-            locationBR = null;
-        }
-        if (locationModeBR != null) {
-            mContext.unregisterReceiver(locationModeBR);
-            locationBR = null;
-        }
-        if (airplaneBR != null) {
-            mContext.unregisterReceiver(airplaneBR);
-            airplaneBR = null;
-        }
-    }
-
-    private class VolumeBroadcastReceiver extends BroadcastReceiver {
-
-        private boolean isRegistered = false;
-
-        public void setRegistered(boolean registered) {
-            isRegistered = registered;
-        }
-
-        public boolean isRegistered() {
-            return isRegistered;
-        }
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (intent.getAction().equals("android.media.VOLUME_CHANGED_ACTION")) {
-                WritableMap para = Arguments.createMap();
-                para.putDouble("value", getNormalizationVolume(VOL_MUSIC));
-                para.putDouble(VOL_VOICE_CALL, getNormalizationVolume(VOL_VOICE_CALL));
-                para.putDouble(VOL_SYSTEM, getNormalizationVolume(VOL_SYSTEM));
-                para.putDouble(VOL_RING, getNormalizationVolume(VOL_RING));
-                para.putDouble(VOL_MUSIC, getNormalizationVolume(VOL_MUSIC));
-                para.putDouble(VOL_ALARM, getNormalizationVolume(VOL_ALARM));
-                para.putDouble(VOL_NOTIFICATION, getNormalizationVolume(VOL_NOTIFICATION));
-                try {
-                    mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
-                            .emit("EventVolume", para);
-                } catch (RuntimeException e) {
-                    // Possible to interact with volume before JS bundle execution is finished.
-                    // This is here to avoid app crashing.
-                }
-            }
-        }
     }
 }
diff --git a/node_modules/react-native-system-setting/ios/RTCSystemSetting.m b/node_modules/react-native-system-setting/ios/RTCSystemSetting.m
index c94aaad..6099e57 100644
--- a/node_modules/react-native-system-setting/ios/RTCSystemSetting.m
+++ b/node_modules/react-native-system-setting/ios/RTCSystemSetting.m
@@ -8,7 +8,6 @@

 #import "RTCSystemSetting.h"
 #import <SystemConfiguration/CaptiveNetwork.h>
-#import <CoreLocation/CoreLocation.h>
 #import <CoreTelephony/CTTelephonyNetworkInfo.h>
 #import <ifaddrs.h>
 #import <net/if.h>
@@ -122,7 +121,7 @@ +(BOOL)requiresMainQueueSetup{
 }

 RCT_EXPORT_METHOD(isLocationEnabled:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject){
-    resolve([NSNumber numberWithBool:[CLLocationManager locationServicesEnabled]]);
+    resolve(@NO);
 }

 RCT_EXPORT_METHOD(switchBluetooth){
