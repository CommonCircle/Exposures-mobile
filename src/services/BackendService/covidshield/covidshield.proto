syntax = "proto2";
import "google/protobuf/timestamp.proto";

package covidshield;
option go_package="pkg/proto/covidshield";

// Clients will receive a One Time Code via some external channel (i.e. SMS or
// verbal). Then, upon issuing THIS request, they will generate a new keypair.
// If the response comes back successful, the appPublicKey (and the
// corresponding private key) and the returned serverPublicKey will be kept in
// local storage for the duration of this reporting window (the next 14 days).
//
// appPublicKeys must not be re-used for new KeyClaimRequests, or the requests
// will fail.
message KeyClaimRequest {
  // oneTimeCode is the code received from the testing portal.
  required string oneTimeCode = 1; // 8 numerical digits
  // appPublicKey is generated locally and saved upon successful request
  // completion.
  required bytes appPublicKey = 2; // 32 bytes
}

// KeyClaimResponse is received from the server in response to a
// KeyClaimRequest. If the request was successful, error will be NONE and
// serverPublicKey will be set.
message KeyClaimResponse {
  enum ErrorCode {
    NONE = 0;
    UNKNOWN = 1;
    INVALID_ONE_TIME_CODE = 2;
    SERVER_ERROR = 3;
    // Indicates the key is invalid, or already registered.
    INVALID_KEY = 4;
  }
  optional ErrorCode error = 1;
  optional bytes serverPublicKey = 2; // 32 bytes
}

// We are using a NaCl Box (Curve25519+XSalsa20+Poly1305) to encrypt and
// authorize messages.
//
// Note that we are not *explicitly* signing the payload: NaCl Box provides
// non-repudiability for the receiving party.  The receiving party (and only
// the receiving party) could forge the sender's signature on this message, but
// we there's no need or possibility for third-party verification in this
// scheme.
//
// See "Security Model" at https://nacl.cr.yp.to/box.html
message EncryptedUploadRequest {
  // serverPublicKey is provided by the Diagnosis Server to the App, and is
  // used to encrypt the payload. This key should be stored locally for 14
  // days, and used to submit the follow-up Diagnosis Key.
  required bytes serverPublicKey = 1; // 32 bytes
  // appPublicKey is the public side of a keypair generated once by the
  // application and linked to the serverPublicKey. These are linked in the
  // Diagnosis Server, so that only one appPublicKey is authorized to upload
  // for a given serverPublicKey. If a new serverPublicKey is issued to an App
  // (e.g. months later), a new appPublicKey should be generated.
  required bytes appPublicKey = 2; // 32 bytes
  // nonce must be 24 random bytes, and absolutely must NOT be re-used between
  // subsequent submissions of Diagnosis Keys. This nonce is passed to the
  // encryption library to generate the ciphertext.
  required bytes nonce = 3; // 24 bytes
  // payload is the result of encoding/marshalling, and then encrypting, an
  // `Upload` message. It is done this way rather than as an embedded message
  // field, because we need to encrypt a byte stream, not an object.
  required bytes payload = 4; // variable length
}

// EncryptedUploadResponse is received from the server in response to a
// EncryptedUploadRequest. If the request was successful, error will be NONE.
message EncryptedUploadResponse {
  enum ErrorCode {
    NONE = 0;
    UNKNOWN = 1;
    INVALID_KEYPAIR = 2;
    DECRYPTION_FAILED = 3;
    INVALID_PAYLOAD = 4;
    SERVER_ERROR = 5;
    INVALID_CRYPTO_PARAMETERS = 6;
    TOO_MANY_KEYS = 7;
    // The timestamp in the Upload message must be no more than one hour old,
    // otherwise this error is generated.
    INVALID_TIMESTAMP = 8;
    INVALID_ROLLING_PERIOD = 10;
    INVALID_KEY_DATA = 11;
    INVALID_ROLLING_START_NUMBER = 12;
    INVALID_TRANSMISSION_RISK_LEVEL = 13;
  }
  required ErrorCode error = 1;
}

// Upload is the decrypted type of the `payload` field in EncryptedUploadRequest.
message Upload {
  // timestamp is just the current device time at message generation.
  required google.protobuf.Timestamp timestamp = 1;
  // keys returns from the ExposureNotification API.
  repeated Key keys = 2;
}

// File, Header, and Key messages imported from:
// https://developer.apple.com/documentation/exposurenotification/enmanager/3586331-detectexposures
//
// The format of the /retrieve-* endpoints is a stream of serialized File
// messages, each length-prefixed with a big-endian uint32. Clients should take
// care to verify that the batchSize from the headers matches the total number
// of records received.
//
// In general, we don't change or add field definitions below this point.

message File {
  optional Header header = 1;
  repeated Key key = 2;
}

message Header {
  optional int64 startTimestamp = 1; // Time window of keys in this file based on arrival to server, in UTC.
  optional int64 endTimestamp = 2;
  optional string region = 3; // Region for which these keys came from (e.g., country)
  optional int32 batchNum = 4; // E.g., if batchNum=2;batchSize=10, this is batch 2 of 10
  optional int32 batchSize = 5;
}

message Key {
  optional bytes keyData = 1; // Key of infected user
  optional uint32 rollingStartNumber = 2; // Interval number when the key's EKRollingPeriod started.
  optional uint32 rollingPeriod = 3; // Number of 10-minute windows between key rolling.
  optional int32 transmissionRiskLevel = 4; // Risk of transmission associated with the person this key came from.
}
